// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ffmpeg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FFMPEGClient is the client API for FFMPEG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FFMPEGClient interface {
	MergeVideo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Info, error)
}

type fFMPEGClient struct {
	cc grpc.ClientConnInterface
}

func NewFFMPEGClient(cc grpc.ClientConnInterface) FFMPEGClient {
	return &fFMPEGClient{cc}
}

func (c *fFMPEGClient) MergeVideo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/ffmpeg.FFMPEG/MergeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FFMPEGServer is the server API for FFMPEG service.
// All implementations must embed UnimplementedFFMPEGServer
// for forward compatibility
type FFMPEGServer interface {
	MergeVideo(context.Context, *Param) (*Info, error)
	mustEmbedUnimplementedFFMPEGServer()
}

// UnimplementedFFMPEGServer must be embedded to have forward compatible implementations.
type UnimplementedFFMPEGServer struct {
}

func (UnimplementedFFMPEGServer) MergeVideo(context.Context, *Param) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeVideo not implemented")
}
func (UnimplementedFFMPEGServer) mustEmbedUnimplementedFFMPEGServer() {}

// UnsafeFFMPEGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FFMPEGServer will
// result in compilation errors.
type UnsafeFFMPEGServer interface {
	mustEmbedUnimplementedFFMPEGServer()
}

func RegisterFFMPEGServer(s grpc.ServiceRegistrar, srv FFMPEGServer) {
	s.RegisterService(&FFMPEG_ServiceDesc, srv)
}

func _FFMPEG_MergeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FFMPEGServer).MergeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ffmpeg.FFMPEG/MergeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FFMPEGServer).MergeVideo(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

// FFMPEG_ServiceDesc is the grpc.ServiceDesc for FFMPEG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FFMPEG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ffmpeg.FFMPEG",
	HandlerType: (*FFMPEGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeVideo",
			Handler:    _FFMPEG_MergeVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ffmpeg.proto",
}
